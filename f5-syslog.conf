# Config file for interpreting the F5 ltm log

input {
  syslog {
    port => 5044
  }
}

filter {

    # LTM logs are done in facility 22
    if ([facility] == 22) {

        # Essentially the following lines extracts the fields that is always in the same position
        # and stores the rest of the line in msg.
        # Enable usage of anchors (makes regex more exact and efficient)

        dissect {
            mapping => {
                "message" => "%{} %{process} %{msg}"
            }
        }

        # Capture events which states that a monitor has reported a pool member as down
        if ([msg] =~ "^01070638:5: Pool") {
            grok {
                break_on_match => false
                match => {
                    "msg" => [
                        "^(?<message_code>01070638:5): Pool (?<pool>[^ ]+) member (?<member>[^ ]+) monitor status (?<status>[^ ]+) \[ (?<monitor>[^:]+)",
                        " (?<failure_reason>[cC]onnection refused)",
                        " (?<failure_reason>Could not connect)",
                        " (?<failure_reason>Unable to connect)",
                        " (?<failure_reason>Response Code: [0-9]+)"
                    ]
                }
            }
        } else if ([msg] =~ "^01070727:5: Pool") {
            # Capture events which states that a monitor has reported a pool member as up again
            grok {
                match => {
                    "msg" => [
                        "^(?<message_code>01070727:5): Pool (?<pool>[^ ]+) member (?<member>[^ ]+) monitor status (?<status>[^ ]+) \[ (?<monitor>[^:]+)"
                    ]
                }
            }
        } else if ([msg] =~ "^01010028:3: No members") {
            # Capture events which states that there is no available members for a pool
            grok {
                match => {
                    "msg" => [
                        "^(?<message_code>01010028:3): No members available for pool (?<pool>.*)"
                    ]
                }
                add_field => { "no_available_members" => "true" }
            }
        } else if ([msg] =~ "^01010221:3: Pool ") {
            # Log when a pool as available members
            grok {
                match => {
                    "msg" => [
                        "^(?<message_code>01010221:3): Pool (?<pool>[^ ]+) now has available members"
                    ]
                }
                add_field => { "no_available_members" => "false" }
            }
        } else if ([msg] =~ "^Rule") {
            # Handle iRules that logs things
            grok {
                match => {
                    "msg" => [
                        "^Rule (?<rule>[^ ]+) <(?<event>[^ ]+)>: (?<log_message>.*)"
                    ]
                }
            }
        }

    } else if ([facility] == 16) {

        # This handles audit logs
        #client tmui, user indeni - transaction #1071369-2 - object 0 - modify { rule { rule_name "/Common/bigipreport_pool_status"
        #client tmui, user indeni - transaction #1124005-2 - object 0 - obj_delete { rule { rule_name \"/Common/audit\" } } [Status=Command OK]\n
        #client tmui, user indeni - transaction #1129977-2 - object 0 - create { rule { rule_name \"/Common/audit\" rule_definition \"####\" } } [Status=Command OK]\n",
        #pid=30091 user=root folder=/Common module=(tmos)# status=[Command OK] cmd_data=save / sys config partitions all\n",
        #client tmsh, tmsh-pid-30154, user indeni - transaction #1134731-2 - object 0 - obj_delete { rule { rule_name \"/Common/audit\" } } [Status=Command OK]\n",

        dissect {
            mapping => {
                "message" => "%{} %{process} %{message_code} %{} %{} %{msg}"
            }
        }

        if ([msg] =~ "transaction") {

            grok {
                match => {
                    "msg" => [
                        '^client.+?, user (?<user>[^ ]+).+?(?<action>(obj_delete|create|modify)) \{ (?<type>[^ ]+).+?(?<object>\/[^\"]*)'
                    ]
                }
            }
        }

    }

    # Mutate is a filter plugin that allows modification of fields
    # This section polishes and cleans up redundant data

    mutate {
        # Remove the colon after the process value
        gsub => ["process",":$", ""]
        # Remove the msg field as we don't need it anymore
        remove_field => [ "msg" ]
    }


}

output {
    elasticsearch {
        hosts => ["192.168.10.17:9200"]
        index => "f5-syslog-%{+YYYY.MM.dd}"
    }
}
